{"ast":null,"code":"import _classCallCheck from \"D:\\\\Udacity\\\\React nanodegree\\\\React & Redux\\\\react-and-redux-final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Udacity\\\\React nanodegree\\\\React & Redux\\\\react-and-redux-final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Udacity\\\\React nanodegree\\\\React & Redux\\\\react-and-redux-final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Udacity\\\\React nanodegree\\\\React & Redux\\\\react-and-redux-final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Udacity\\\\React nanodegree\\\\React & Redux\\\\react-and-redux-final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Udacity\\\\React nanodegree\\\\React & Redux\\\\react-and-redux-final-project\\\\src\\\\components\\\\Question.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/questions';\nimport { formatQuestion } from '../utils/_DATA';\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Question, _Component);\n\n  function Question() {\n    _classCallCheck(this, Question);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Question).apply(this, arguments));\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var question = this.props.question;\n      return React.createElement(Link, {\n        to: \"/questions/\".concat(question.id),\n        className: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"/\".concat(users[question.author].avatarURL),\n        alt: \"Avatar of \".concat(question.author),\n        className: \"avatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"Would You Rather...\"), React.createElement(\"div\", {\n        className: \"option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: question.optionOne.votes.indexOf(authedUser) > -1 ? 'question-option-selected' : answered ? 'answered' : '',\n        onClick: function onClick(event) {\n          return _this.handleOptionClicked(1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, question.optionOne.text), answered && React.createElement(\"span\", {\n        className: \"stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Votes: \", question.optionOne.votes.length, \" (\", percentVotesOptionOne, \"%)\")), React.createElement(\"div\", {\n        className: \"option opt-offset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: question.optionTwo.votes.indexOf(authedUser) > -1 ? 'question-option-two question-option-selected' : answered ? 'question-option-two answered' : 'question-option-two',\n        onClick: function onClick(event) {\n          return _this.handleOptionClicked(2);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, question.optionTwo.text), answered && React.createElement(\"span\", {\n        className: \"stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Votes: \", question.optionTwo.votes.length, \" (\", percentVotesOptionTwo, \"%)\")));\n    }\n  }]);\n\n  return Question;\n}(Component);\n\nfunction mapStateToProps(_ref, _ref2) {\n  var authedUser = _ref.authedUser,\n      users = _ref.users,\n      questions = _ref.questions;\n  var id = _ref2.id;\n  console.log(\"the id of the question is = \" + questions[id]);\n  var question = questions[id];\n  var optionOneText = \"op1\";\n  var optionTwoText = \"op2\";\n  var author = \"author\";\n  return {\n    questions: questions,\n    authedUser: authedUser,\n    users: users,\n    question: question ? formatQuestion(question, optionOneText, optionTwoText, author) : null\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Question);","map":{"version":3,"sources":["D:\\Udacity\\React nanodegree\\React & Redux\\react-and-redux-final-project\\src\\components\\Question.js"],"names":["React","Component","Link","connect","actions","formatQuestion","Question","question","props","id","users","author","avatarURL","optionOne","votes","indexOf","authedUser","answered","event","handleOptionClicked","text","length","percentVotesOptionOne","optionTwo","percentVotesOptionTwo","mapStateToProps","questions","console","log","optionOneText","optionTwoText"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/questions';\r\nimport { formatQuestion } from '../utils/_DATA'\r\n\r\nclass Question extends Component {\r\n\r\n  render() {\r\n    const question = this.props.question\r\n\r\n    return (\r\n      <Link to={`/questions/${question.id}`} className='question'>\r\n        <img\r\n          src={`/${users[question.author].avatarURL}`}\r\n          alt={`Avatar of ${question.author}`}\r\n          className='avatar'\r\n        />\r\n        <span>Would You Rather...</span>\r\n        <div className='option'>\r\n          <button\r\n            className={\r\n              question.optionOne.votes.indexOf(authedUser) > -1\r\n              ? 'question-option-selected'\r\n              : answered\r\n                ? 'answered'\r\n                : ''\r\n            }\r\n            onClick={(event) => this.handleOptionClicked(1)}\r\n          >\r\n            {question.optionOne.text}\r\n          </button>\r\n          {answered && <span className='stats'>\r\n            Votes: {question.optionOne.votes.length} ({percentVotesOptionOne}%)\r\n          </span>}\r\n        </div>\r\n        <div className='option opt-offset'>\r\n          <button\r\n            className={\r\n              question.optionTwo.votes.indexOf(authedUser) > -1\r\n              ? 'question-option-two question-option-selected'\r\n              : answered\r\n                ? 'question-option-two answered'\r\n                : 'question-option-two'\r\n            }\r\n            onClick={(event) => this.handleOptionClicked(2)}\r\n          >\r\n            {question.optionTwo.text}\r\n          </button>\r\n          {answered && <span className='stats'>\r\n            Votes: {question.optionTwo.votes.length} ({percentVotesOptionTwo}%)\r\n          </span>}\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, users, questions },{id}) {\r\n  console.log(\"the id of the question is = \"+questions[id])\r\n  const question = questions[id]\r\n  const optionOneText = \"op1\"\r\n  const optionTwoText = \"op2\" \r\n  const author = \"author\"\r\n  return {\r\n    questions,\r\n    authedUser,\r\n    users,\r\n    question: question\r\n    ? formatQuestion(question, optionOneText, optionTwoText, author )\r\n    : null\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(Question);\r\n"]},"metadata":{},"sourceType":"module"}